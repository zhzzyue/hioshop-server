{
    "version": 3,
    "sources": [
        "../../../src/admin/controller/user.js"
    ],
    "names": [
        "Base",
        "require",
        "moment",
        "module",
        "exports",
        "indexAction",
        "page",
        "get",
        "size",
        "nickname",
        "buffer",
        "Buffer",
        "from",
        "toString",
        "model",
        "data",
        "where",
        "order",
        "countSelect",
        "item",
        "register_time",
        "unix",
        "format",
        "last_login_time",
        "info",
        "userData",
        "success",
        "infoAction",
        "id",
        "find",
        "datainfoAction",
        "orderSum",
        "user_id",
        "order_type",
        "is_delete",
        "count",
        "orderDone",
        "order_status",
        "orderMoney",
        "sum",
        "cartSum",
        "addressAction",
        "addr",
        "province_name",
        "province_id",
        "getField",
        "city_name",
        "city_id",
        "district_name",
        "district_id",
        "full_region",
        "address",
        "saveaddressAction",
        "post",
        "name",
        "mobile",
        "addOptions",
        "province",
        "city",
        "district",
        "update",
        "cartdataAction",
        "add_time",
        "footAction",
        "alias",
        "join",
        "table",
        "as",
        "on",
        "console",
        "log",
        "orderAction",
        "goodsList",
        "field",
        "order_id",
        "select",
        "goodsCount",
        "forEach",
        "v",
        "number",
        "postscript",
        "order_status_text",
        "getOrderStatusText",
        "button_text",
        "getOrderBtnText",
        "orderInfo",
        "statusText",
        "updateInfoAction",
        "updateNameAction",
        "updateMobileAction",
        "storeAction",
        "isPost",
        "values",
        "is_show",
        "is_new",
        "add",
        "destoryAction",
        "limit",
        "delete"
    ],
    "mappings": "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",
    "file": "../../../src/admin/controller/user.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nconst moment = require('moment');\nmodule.exports = class extends Base {\n    /**\n     * index action\n     * @return {Promise} []\n     */\n    async indexAction() {\n        const page = this.get('page') || 1;\n        const size = this.get('size') || 10;\n        let nickname = this.get('nickname') || '';\n        const buffer = Buffer.from(nickname);\n        nickname = buffer.toString('base64');\n        const model = this.model('user');\n        const data = await model.where({\n            nickname: ['like', `%${nickname}%`],\n        }).order(['id DESC']).page(page, size).countSelect();\n        for (const item of data.data) {\n            item.register_time = moment.unix(item.register_time).format('YYYY-MM-DD HH:mm:ss');\n            item.last_login_time = moment.unix(item.last_login_time).format('YYYY-MM-DD HH:mm:ss');\n            item.nickname = Buffer.from(item.nickname, 'base64').toString();\n        }\n        let info = {\n            userData: data,\n        }\n        return this.success(info);\n    }\n    async infoAction() {\n        const id = this.get('id');\n        const model = this.model('user');\n        let info = await model.where({\n            id: id\n        }).find();\n        info.register_time = moment.unix(info.register_time).format('YYYY-MM-DD HH:mm:ss');\n        info.last_login_time = moment.unix(info.last_login_time).format('YYYY-MM-DD HH:mm:ss');\n        info.nickname = Buffer.from(info.nickname, 'base64').toString();\n        return this.success(info);\n    }\n    async datainfoAction() {\n        const id = this.get('id');\n        let info = {};\n        info.orderSum = await this.model('order').where({\n            user_id: id,\n            order_type: ['<', 8],\n            is_delete: 0\n        }).count();\n        info.orderDone = await this.model('order').where({\n            user_id: id,\n            order_status: ['IN', '302,303,401'],\n            order_type: ['<', 8],\n            is_delete: 0\n        }).count();\n        info.orderMoney = await this.model('order').where({\n            user_id: id,\n            order_status: ['IN', '302,303,401'],\n            order_type: ['<', 8],\n            is_delete: 0\n        }).sum('actual_price');\n        info.cartSum = await this.model('cart').where({\n            user_id: id,\n            is_delete: 0\n        }).sum('number');\n        return this.success(info);\n    }\n    async addressAction() {\n        const id = this.get('id');\n        const page = this.get('page') || 1;\n        const size = this.get('size') || 10;\n        let addr = await this.model('address').where({\n            user_id: id\n        }).page(page, size).countSelect();\n        for (const item of addr.data) {\n            let province_name = await this.model('region').where({\n                id: item.province_id\n            }).getField('name', true);\n            let city_name = await this.model('region').where({\n                id: item.city_id\n            }).getField('name', true);\n            let district_name = await this.model('region').where({\n                id: item.district_id\n            }).getField('name', true);\n            item.full_region = province_name + city_name + district_name + item.address;\n        }\n        return this.success(addr);\n    }\n    async saveaddressAction() {\n        const id = this.post('id');\n        const user_id = this.post('user_id');\n        const name = this.post('name');\n        const mobile = this.post('mobile');\n        const address = this.post('address');\n        const addOptions = this.post('addOptions');\n        const province = addOptions[0];\n        const city = addOptions[1];\n        const district = addOptions[2];\n        let info = {\n            name: name,\n            mobile: mobile,\n            address: address,\n            province_id: province,\n            district_id: district,\n            city_id: city\n        }\n        await this.model('address').where({\n            user_id: user_id,\n            id: id\n        }).update(info);\n        return this.success();\n    }\n    async cartdataAction() {\n        const id = this.get('id');\n        const page = this.get('page') || 1;\n        const size = this.get('size') || 10;\n        const model = this.model('cart');\n        const data = await model.where({\n            user_id: id\n        }).order(['add_time DESC']).page(page, size).countSelect();\n        for (const item of data.data) {\n            item.add_time = moment.unix(item.add_time).format('YYYY-MM-DD HH:mm:ss');\n        }\n        return this.success(data);\n    }\n    async footAction() {\n        const id = this.get('id');\n        const page = this.get('page') || 1;\n        const size = this.get('size') || 10;\n        const model = this.model('footprint');\n        const data = await model.alias('f').join({\n            table: 'goods',\n            join: 'left',\n            as: 'g',\n            on: ['f.goods_id', 'g.id']\n        }).where({\n            user_id: id\n        }).page(page, size).countSelect();\n        console.log(data);\n        return this.success(data);\n    }\n    async orderAction() {\n        const page = this.get('page') || 1;\n        const size = this.get('size') || 10;\n        const user_id = this.get('id');\n        const model = this.model('order');\n        const data = await model.where({\n            user_id: user_id,\n            order_type: ['<', 8],\n        }).order(['id DESC']).page(page, size).countSelect();\n        console.log(data.count);\n        for (const item of data.data) {\n            item.goodsList = await this.model('order_goods').field('goods_name,list_pic_url,number,goods_specifition_name_value,retail_price').where({\n                order_id: item.id,\n                is_delete: 0\n            }).select();\n            item.goodsCount = 0;\n            item.goodsList.forEach(v => {\n                item.goodsCount += v.number;\n            });\n            let province_name = await this.model('region').where({\n                id: item.province\n            }).getField('name', true);\n            let city_name = await this.model('region').where({\n                id: item.city\n            }).getField('name', true);\n            let district_name = await this.model('region').where({\n                id: item.district\n            }).getField('name', true);\n            item.full_region = province_name + city_name + district_name;\n            item.postscript = Buffer.from(item.postscript, 'base64').toString();\n            item.add_time = moment.unix(item.add_time).format('YYYY-MM-DD HH:mm:ss');\n            item.order_status_text = await this.model('order').getOrderStatusText(item.id);\n            item.button_text = await this.model('order').getOrderBtnText(item.id);\n        }\n        return this.success(data);\n    }\n    async getOrderStatusText(orderInfo) {\n        let statusText = '待付款';\n        switch (orderInfo.order_status) {\n            case 101:\n                statusText = '待付款';\n                break;\n            case 102:\n                statusText = '交易关闭';\n                break;\n            case 103:\n                statusText = '交易关闭'; //到时间系统自动取消\n                break;\n            case 201:\n                statusText = '待发货';\n                break;\n            case 202:\n                statusText = '退款中';\n                break;\n            case 203:\n                statusText = '已退款';\n                break;\n            case 300:\n                statusText = '已备货';\n                break;\n            case 301:\n                statusText = '已发货';\n                break;\n            case 302:\n                statusText = '待评价';\n                break;\n            case 303:\n                statusText = '待评价'; //到时间，未收货的系统自动收货、\n                break;\n            case 401:\n                statusText = '交易成功'; //到时间，未收货的系统自动收货、\n                break;\n            case 801:\n                statusText = '拼团待付款';\n                break;\n            case 802:\n                statusText = '拼团中'; // 如果sum变为0了。则，变成201待发货\n                break;\n        }\n        return statusText;\n    }\n    async updateInfoAction() {\n        const id = this.post('id');\n        let nickname = this.post('nickname');\n        const buffer = Buffer.from(nickname);\n        nickname = buffer.toString('base64');\n        const model = this.model('user');\n        const data = await model.where({\n            id: id\n        }).update({\n            nickname: nickname\n        });\n        return this.success(data);\n    }\n    async updateNameAction() {\n        const id = this.post('id');\n        const name = this.post('name');\n        const model = this.model('user');\n        const data = await model.where({\n            id: id\n        }).update({\n            name: name\n        });\n        return this.success(data);\n    }\n    async updateMobileAction() {\n        const id = this.post('id');\n        const mobile = this.post('mobile');\n        const model = this.model('user');\n        const data = await model.where({\n            id: id\n        }).update({\n            mobile: mobile\n        });\n        return this.success(data);\n    }\n    async storeAction() {\n        if (!this.isPost) {\n            return false;\n        }\n        const values = this.post();\n        const id = this.post('id');\n        const model = this.model('user');\n        values.is_show = values.is_show ? 1 : 0;\n        values.is_new = values.is_new ? 1 : 0;\n        if (id > 0) {\n            await model.where({\n                id: id\n            }).update(values);\n        } else {\n            delete values.id;\n            await model.add(values);\n        }\n        return this.success(values);\n    }\n    async destoryAction() {\n        const id = this.post('id');\n        await this.model('user').where({\n            id: id\n        }).limit(1).delete();\n        // TODO 删除图片\n        return this.success();\n    }\n};"
    ]
}