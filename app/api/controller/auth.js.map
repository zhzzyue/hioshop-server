{
    "version": 3,
    "sources": [
        "../../../src/api/controller/auth.js"
    ],
    "names": [
        "Base",
        "require",
        "rp",
        "module",
        "exports",
        "loginByWeixinAction",
        "code",
        "post",
        "fullUserInfo",
        "userInfo",
        "currentTime",
        "parseInt",
        "Date",
        "getTime",
        "clientIp",
        "options",
        "method",
        "url",
        "qs",
        "grant_type",
        "js_code",
        "secret",
        "think",
        "config",
        "appid",
        "sessionData",
        "JSON",
        "parse",
        "openid",
        "fail",
        "crypto",
        "sha1",
        "createHash",
        "update",
        "rawData",
        "session_key",
        "digest",
        "signature",
        "WeixinSerivce",
        "service",
        "weixinUserInfo",
        "decryptUserInfoData",
        "encryptedData",
        "iv",
        "isEmpty",
        "userId",
        "model",
        "where",
        "weixin_openid",
        "getField",
        "is_new",
        "buffer",
        "Buffer",
        "from",
        "nickName",
        "nickname",
        "toString",
        "add",
        "username",
        "uuid",
        "password",
        "register_time",
        "register_ip",
        "last_login_time",
        "last_login_ip",
        "mobile",
        "avatar",
        "avatarUrl",
        "gender",
        "country",
        "province",
        "city",
        "user_id",
        "data",
        "newBuffer",
        "newNickname",
        "id",
        "newUserInfo",
        "field",
        "find",
        "TokenSerivce",
        "sessionKey",
        "create",
        "success",
        "token",
        "logoutAction"
    ],
    "mappings": "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",
    "file": "../../../src/api/controller/auth.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nconst rp = require('request-promise');\nmodule.exports = class extends Base {\n    async loginByWeixinAction() {\n        const code = this.post('code');\n        const fullUserInfo = this.post('userInfo');\n        const userInfo = fullUserInfo.userInfo;\n        let currentTime = parseInt(new Date().getTime() / 1000);\n        const clientIp = ''; // 暂时不记录 ip test git\n        // 获取openid\n        const options = {\n            method: 'GET',\n            url: 'https://api.weixin.qq.com/sns/jscode2session',\n            qs: {\n                grant_type: 'authorization_code',\n                js_code: code,\n                secret: think.config('weixin.secret'),\n                appid: think.config('weixin.appid')\n            }\n        };\n        let sessionData = await rp(options);\n        sessionData = JSON.parse(sessionData);\n        if (!sessionData.openid) {\n            return this.fail('登录失败1');\n        }\n        // 验证用户信息完整性\n        const crypto = require('crypto');\n        const sha1 = crypto.createHash('sha1').update(fullUserInfo.rawData + sessionData.session_key).digest('hex');\n        if (fullUserInfo.signature !== sha1) {\n            return this.fail('登录失败2');\n        }\n        // 解释用户数据\n        const WeixinSerivce = this.service('weixin', 'api');\n        const weixinUserInfo = await WeixinSerivce.decryptUserInfoData(sessionData.session_key, fullUserInfo.encryptedData, fullUserInfo.iv);\n        if (think.isEmpty(weixinUserInfo)) {\n            return this.fail('登录失败3');\n        }\n        // 根据openid查找用户是否已经注册\n        let userId = await this.model('user').where({\n            weixin_openid: sessionData.openid\n        }).getField('id', true);\n        let is_new = 0;\n        if (think.isEmpty(userId)) {\n            // 注册\n            const buffer = Buffer.from(userInfo.nickName);\n            let nickname = buffer.toString('base64');\n            userId = await this.model('user').add({\n                username: '微信用户' + think.uuid(6),\n                password: sessionData.openid,\n                register_time: currentTime,\n                register_ip: clientIp,\n                last_login_time: currentTime,\n                last_login_ip: clientIp,\n                mobile: '',\n                weixin_openid: sessionData.openid,\n                avatar: userInfo.avatarUrl || '',\n                gender: userInfo.gender || 1, // 性别 0：未知、1：男、2：女\n                nickname: nickname,\n                country: userInfo.country,\n                province: userInfo.province,\n                city: userInfo.city\n            });\n            is_new = 1;\n        }\n        sessionData.user_id = userId;\n        // 查询用户信息\n        let data = fullUserInfo.userInfo;\n        const newBuffer = Buffer.from(data.nickName);\n        let newNickname = newBuffer.toString('base64');\n        // 更新登录信息\n        await this.model('user').where({\n            id: userId\n        }).update({\n            last_login_time: currentTime,\n            last_login_ip: clientIp,\n            avatar: data.avatarUrl,\n            nickname: newNickname,\n            country: data.country,\n            province: data.province,\n            city: data.city\n        });\n        const newUserInfo = await this.model('user').field('id,username,nickname,gender, avatar').where({\n            id: userId\n        }).find();\n        newUserInfo.nickname = Buffer.from(newUserInfo.nickname, 'base64').toString();\n        const TokenSerivce = this.service('token', 'api');\n        const sessionKey = await TokenSerivce.create(sessionData);\n        if (think.isEmpty(newUserInfo) || think.isEmpty(sessionKey)) {\n            return this.fail('登录失败4');\n        }\n        return this.success({\n            token: sessionKey,\n            userInfo: newUserInfo,\n            is_new: is_new\n        });\n    }\n    async logoutAction() {\n        return this.success();\n    }\n};"
    ]
}