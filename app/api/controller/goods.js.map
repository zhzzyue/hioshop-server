{
    "version": 3,
    "sources": [
        "../../../src/api/controller/goods.js"
    ],
    "names": [
        "Base",
        "require",
        "moment",
        "module",
        "exports",
        "indexAction",
        "model",
        "goodsList",
        "select",
        "success",
        "saveUserIdAction",
        "formId",
        "post",
        "user",
        "where",
        "id",
        "think",
        "userId",
        "find",
        "currentTime",
        "parseInt",
        "Date",
        "getTime",
        "data",
        "form_id",
        "order_id",
        "user_id",
        "add_time",
        "add",
        "detailAction",
        "goodsId",
        "get",
        "info",
        "is_delete",
        "isEmpty",
        "fail",
        "gallery",
        "goods_id",
        "order",
        "limit",
        "addFootprint",
        "productList",
        "getProductList",
        "goodsNumber",
        "item",
        "goods_number",
        "specificationList",
        "getSpecificationList",
        "goodsShareAction",
        "field",
        "listAction",
        "keyword",
        "sort",
        "sales",
        "whereMap",
        "is_on_sale",
        "name",
        "orderMap",
        "retail_price",
        "sell_volume",
        "sort_order",
        "goodsData",
        "countAction",
        "goodsCount",
        "count"
    ],
    "mappings": "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",
    "file": "../../../src/api/controller/goods.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nconst moment = require('moment');\nmodule.exports = class extends Base {\n    async indexAction() {\n        const model = this.model('goods');\n        const goodsList = await model.select();\n        return this.success(goodsList);\n    }\n    /**\n     * 获取sku信息，用于购物车编辑时选择规格\n     * @returns {Promise.<Promise|PreventPromise|void>}\n     */\n    async saveUserIdAction() {\n        const formId = this.post('formId');\n        let user = await this.model('user').where({\n            id: think.userId\n        }).find();\n        const currentTime = parseInt(new Date().getTime() / 1000);\n        let data = {\n            form_id: formId,\n            order_id: 0,\n            user_id: think.userId,\n            add_time: currentTime,\n        }\n        await this.model('formid').add(data);\n    }\n    /**\n     * 商品详情页数据\n     * @returns {Promise.<Promise|PreventPromise|void>}\n     */\n    async detailAction() {\n        const goodsId = this.get('id');\n        const model = this.model('goods');\n        let info = await model.where({\n            id: goodsId,\n\t\t\tis_delete:0\n        }).find();\n\t\tif(think.isEmpty(info)){\n\t\t\treturn this.fail('该商品不存在或已下架');\n\t\t}\n        const gallery = await this.model('goods_gallery').where({\n            goods_id: goodsId,\n            is_delete: 0,\n        }).order('sort_order').limit(6).select();\n        await this.model('footprint').addFootprint(think.userId, goodsId);\n        let productList = await model.getProductList(goodsId);\n        let goodsNumber = 0;\n        for (const item of productList) {\n            if (item.goods_number > 0) {\n                goodsNumber = goodsNumber + item.goods_number;\n            }\n        }\n        let specificationList = await model.getSpecificationList(goodsId);\n        info.goods_number = goodsNumber;\n        return this.success({\n            info: info,\n            gallery: gallery,\n            specificationList: specificationList,\n            productList: productList\n        });\n    }\n    async goodsShareAction() {\n        const goodsId = this.get('id');\n        const info = await this.model('goods').where({\n            id: goodsId\n        }).field('name,retail_price').find();\n        return this.success(info);\n    }\n    /**\n     * 获取商品列表\n     * @returns {Promise.<*>}\n     */\n    async listAction() {\n        const keyword = this.get('keyword');\n        const sort = this.get('sort');\n        const order = this.get('order');\n        const sales = this.get('sales');\n        const model = this.model('goods');\n        const whereMap = {\n            is_on_sale: 1,\n            is_delete: 0,\n        };\n        if (!think.isEmpty(keyword)) {\n            whereMap.name = ['like', `%${keyword}%`];\n            // 添加到搜索历史\n            await this.model('search_history').add({\n                keyword: keyword,\n                user_id: think.userId,\n                add_time: parseInt(new Date().getTime() / 1000)\n            });\n            //    TODO 之后要做个判断，这个词在搜索记录中的次数，如果大于某个值，则将他存入keyword\n        }\n        // 排序\n        let orderMap = {};\n        if (sort === 'price') {\n            // 按价格\n            orderMap = {\n                retail_price: order\n            };\n        } else if (sort === 'sales') {\n            // 按价格\n            orderMap = {\n                sell_volume: sales\n            };\n        } else {\n            // 按商品添加时间\n            orderMap = {\n                sort_order: 'asc'\n            };\n        }\n        const goodsData = await model.where(whereMap).order(orderMap).select();\n        return this.success(goodsData);\n    }\n    /**\n     * 在售的商品总数\n     * @returns {Promise.<Promise|PreventPromise|void>}\n     */\n    async countAction() {\n        const goodsCount = await this.model('goods').where({\n            is_delete: 0,\n            is_on_sale: 1\n        }).count('id');\n        return this.success({\n            goodsCount: goodsCount\n        });\n    }\n};"
    ]
}